generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// * #region Character Builds

model CharacterBuild {
  id                   Int                   @id @default(autoincrement())
  name                 String                @unique
  thumbnail            String?
  description          String?               @db.Text
  level                Int
  race                 CharacterRace         @relation(fields: [raceId], references: [id])
  raceId               Int                   @map("race_id")
  standingStone        StandingStone         @relation(fields: [standingStoneId], references: [id])
  standingStoneId      Int                   @map("standing_stone_id")
  class                CharacterClass        @relation(fields: [classId], references: [id])
  classId              Int                   @map("class_id")
  magickaStatSpread    Int                   @map("magicka_stat_spread")
  healthStatSpread     Int                   @map("health_stat_spread")
  staminaStatSpread    Int                   @map("stamina_stat_spread")
  characterBuildStars  CharacterBuildStar[]
  characterBuildOwners CharacterBuildOwner[]
  characterBuildPerks  CharacterBuildPerk[]
  userSavedBuilds      UserSavedBuild[]
  characterBuildSteps  CharacterBuildStep[]
  createdAt            DateTime              @default(now()) @map("created_at")
  updatedAt            DateTime              @updatedAt @map("updated_at")

  @@map("character_build")
}

model CharacterBuildStep {
  id               Int            @id @default(autoincrement())
  characterBuild   CharacterBuild @relation(fields: [characterBuildId], references: [id])
  characterBuildId Int            @map("character_build_id")
  orderNumber      Int            @map("order_number")
  description      String         @db.Text
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")

  @@map("character_build_step")
}

model CharacterBuildPerk {
  id               Int            @id @default(autoincrement())
  perk             Perk           @relation(fields: [perkId], references: [id])
  perkId           Int            @map("perk_id")
  characterBuild   CharacterBuild @relation(fields: [characterBuildId], references: [id])
  characterBuildId Int            @map("character_build_id")
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")

  @@map("character_build_perk")
}

model CharacterBuildStar {
  id               Int            @id @default(autoincrement())
  user             User           @relation(fields: [userId], references: [id])
  userId           Int            @map("user_id")
  characterBuild   CharacterBuild @relation(fields: [characterBuildId], references: [id])
  characterBuildId Int            @map("character_build_id")
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")

  @@map("character_build_star")
}

// * #endregion Character Builds

// * #region Supporting Models (Race, Class, Standing Stone, and Perk)

model Skill {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String   @db.Text
  perks       Perk[]
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("skill")
}

model Perk {
  id                  Int                  @id @default(autoincrement())
  skill               Skill                @relation(fields: [skillId], references: [id])
  skillId             Int                  @map("skill_id")
  name                String               @unique
  description         String               @db.Text
  rank                Int
  characterBuildPerks CharacterBuildPerk[]
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")

  @@map("perk")
}

model CharacterRace {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  description     String           @db.Text
  characterBuilds CharacterBuild[]
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")

  @@map("character_race")
}

model StandingStone {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  description     String           @db.Text
  characterBuilds CharacterBuild[]
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")

  @@map("standing_stone")
}

model CharacterClass {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  description     String           @db.Text
  characterBuilds CharacterBuild[]
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")

  @@map("character_class")
}

// * #endregion Supporting Models (Race, Class, Standing Stone, and Perk)

// * #region User and Build Ownership

model User {
  id                   Int                   @id @default(autoincrement())
  profilePicture       String?               @map("profile_picture")
  email                String                @unique
  username             String                @unique
  password             String
  characterBuildOwners CharacterBuildOwner[]
  characterBuildStars  CharacterBuildStar[]
  userSavedBuilds      UserSavedBuild[]
  createdAt            DateTime              @default(now()) @map("created_at")
  updatedAt            DateTime              @updatedAt @map("updated_at")

  @@map("user")
}

model CharacterBuildOwner {
  id               Int            @id @default(autoincrement())
  user             User           @relation(fields: [userId], references: [id])
  userId           Int            @map("user_id")
  characterBuild   CharacterBuild @relation(fields: [characterBuildId], references: [id])
  characterBuildId Int            @map("character_build_id")
  isOriginalPoster Boolean        @map("is_original_poster")
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")

  @@map("character_build_owner")
}

model UserSavedBuild {
  id               Int            @id @default(autoincrement())
  user             User           @relation(fields: [userId], references: [id])
  userId           Int            @map("user_id")
  characterBuild   CharacterBuild @relation(fields: [characterBuildId], references: [id])
  characterBuildId Int            @map("character_build_id")
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")

  @@map("user_saved_build")
}

// * #endregion User and Build Ownership
